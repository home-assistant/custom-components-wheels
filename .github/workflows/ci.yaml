name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DEFAULT_PYTHON: 3.8

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    outputs:
      requirements: ${{ steps.requirements.outputs.exist }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Lint with JQ
        uses: home-assistant/actions/helpers/jq@master

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Check integration files
        id: integrations
        run: |
          for component in components/*; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $component ]]; then
              manifestlink=$(jq --raw-output ".manifest" "${component}")

              echo "Process: ${component} -> ${manifestlink}"
              manifest=$(curl -sSL -f "${manifestlink}" | jq -e --raw-output .)
              if [[ "$?" != 0 ]]; then
                echo "Unable to read the manifest file at ${manifestlink}"
                echo "The URL might be wrong or is not a raw URL."
                exit 1
              fi

              echo "${manifest}" | jq -e --raw-output '.requirements[0]'
              if [[ "$?" != 0 ]]; then
                echo "The integration in $component, does not seem to have any Python requirements."
                echo "Adding it to this repository has no use, since there are nothing to build for it."
                exit 1
              fi
              
              for requirement in $(echo "${manifest}" | jq -e --raw-output '.requirements[]'); do
                echo -e "\t- $requirement"
              done

              echo "${manifest}" | jq -e --raw-output '.requirements[]' >> requirements.txt
            fi
          done

      - name: Check if requirements.txt has content
        id: requirements
        run: | 
          if [[ -f ./requirements.txt ]]; then
            cat ./requirements.txt
            echo "::set-output name=exist::true"
          fi

      - name: Upload requirements.txt
        if: steps.requirements.outputs.exist == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: requirements
          path: ./requirements.txt
        

  requirements:
    needs: lint
    runs-on: ubuntu-latest
    name: Validate Python requirements
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2.2.1
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - uses: lots0logs/gh-action-get-changed-files@2.1.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipdeptree stdlib-list
      - name: Validate requirements
        run: |
          cat ${HOME}/files.json | jq -r '.[]' | scripts/validate_requirements.py

  wheels:
    needs: [lint, requirements]
    if: needs.lint.outputs.requirements
    runs-on: ubuntu-latest
    name: Verify that we can build wheels
    strategy:
      matrix:
        arch: ["aarch64", "armhf", "armv7", "amd64", "i386"]
        tag: ["3.8-alpine3.12", "3.7-alpine3.11"]

    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Download requirements.txt
        uses: actions/download-artifact@v2
        with:
          name: requirements
          path: ./requirements.txt

      - name: Build wheels
        if: needs.init.outputs.requirements == 'true'
        uses: home-assistant/wheels@master
        with:
          tag: ${{ matrix.tag }}
          arch: ${{ matrix.arch }}
          wheels-host: ${{ secrets.WHEELS_HOST }}
          wheels-key: ${{ secrets.WHEELS_KEY }}
          apk: "build-base;cmake;git;linux-headers;bluez-dev;libffi-dev;openssl-dev;glib-dev;eudev-dev;libxml2-dev;libxslt-dev;libpng-dev;libjpeg-turbo-dev;tiff-dev;autoconf;automake;cups-dev;gmp-dev;mpfr-dev;mpc1-dev;ffmpeg-dev"
          pip: "Cython;numpy"
          skip-binary: aiohttp
          test: True
          single: True
          constraints: "constraints.txt"
          requirements: "requirements.txt"