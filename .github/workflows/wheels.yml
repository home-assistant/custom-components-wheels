name: Build wheels

on:
  push:
    branches:
      - master
    paths:
      - "components/*"
  schedule:
    - cron: "0 0 * * *"

jobs:
  init:
    runs-on: ubuntu-latest
    name: Init
    outputs:
      apk: ${{ steps.apk.outputs.packages }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Generate requirements.txt
        run: |
          for component in components/*; do
            manifest=$(jq --raw-output ".manifest" "${component}")

            echo "Process: ${component} -> ${manifest}"
            curl -sSL -f "${manifest}" | jq --raw-output '.requirements | join("\n")' >> ./requirements_raw.txt
          done

          sort ./requirements_raw.txt | uniq -u > ./requirements.txt

          echo "List:"
          cat ./requirements.txt

      - name: Upload requirements.txt
        uses: actions/upload-artifact@v2
        with:
          name: requirements
          path: ./requirements.txt

      - name: Setup tempio
        uses: home-assistant/tempio@main

      - name: Generate APK list
        id: apk
        run: |
          tempio -conf requirements.json  -template templates/builder.template -out apk.list
          packages=$(cat apk.list)
          echo "::set-output name=packages::${packages}"

  wheels:
    runs-on: ubuntu-latest
    needs: init
    name: Prepare wheels for ${{ matrix.python }}-alpine${{ matrix.alpine }} with ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch: ["aarch64", "armhf", "armv7", "amd64", "i386"]
        alpine: ["3.12", "3.13"]
        python: ["3.8"]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2

      - name: Download requirements.txt
        uses: actions/download-artifact@v2
        with:
          name: requirements

      - name: Build wheels
        uses: home-assistant/wheels@master
        with:
          tag: ${{ matrix.python }}-alpine${{ matrix.alpine }}
          arch: ${{ matrix.arch }}
          wheels-host: ${{ secrets.WHEELS_HOST }}
          wheels-key: ${{ secrets.WHEELS_KEY }}
          apk: ${{ needs.init.outputs.apk }}
          pip: "Cython;numpy"
          skip-binary: aiohttp
          single: True
          constraints: "constraints.txt"
          requirements: "requirements.txt"